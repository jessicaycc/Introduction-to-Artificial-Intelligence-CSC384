(1) Assume Pacman is in an NxN maze with no interior walls.
    (1a) What is the branching factor of the successor function (i.e., the maximum number of states produced by the successor function) if Pacman is in the corner? Explain your answer. 
	 The branching factor would be 2 if the Pacman is in the corner. For example, lets say Pacman is at the top right corner. Pacman would only be able to branch to the left or to the bottom since there are walls on his top side and right side. 
    (1b) What is the branching factor of the successor function if Pacman is in the middle? Explain your answer. 
	The branching factor would be four since there are no walls around it. It can explore top, bottom, left and right. 
    (1c) What is the maximum possible depth of the search space? Explain your answer. 
	The maximum possible depth of the search space is 2N-2 assuming the longest path is the solution path, and either BFS or DFS with path checking. Each node would have a branching factor of 2 (because of path checking) except for the goal/last node (which has a branching factor of 0). Therefore, 2*N-2. 




(2) You’ve been asked to analyze space requirements for Pacman’s OPEN list when using A* with a monotone heuristic and starting from a fixed location. Your game has been engineered such that transitions all have non-zero positive costs, c, such that cmin ≤ c ≤ cmax. Assume there is no cycle checking.
Let ctotal represent the optimal cost solution and assume the maximum number of states produced by the successor function is 4. Each node in the search space is comprised of the current state as well as the path taken to get to that state. As such each node on the OPEN list corresponds to a different path that is being explored.
    (2a) Define the maximum number of paths on the OPEN list, n, at the time the solution is found. Your answer should be in terms of the parameters defined above. Explain your answer. 
	 Given that A* uses a a monotonic heuristic meaning that the solution found will be optimal (since monotone implies admissibility).  Therefore, it will have have an optimal cost solution of ctotal. Since the minimal cost for each transition is cmin, the max depth of solution would be ctotal/cmin, and each node has a branching factor of 4, the maximum number of path to the OPEN list, n, would be 4^(ctotal/cmin+1)-1 --> O(4^(ctotal/cmin+1)).
    (2b) Conversely, if you only had space for n paths on the OPEN list, what is the bound on the total cost of the solution that you can guarantee you will find? Again, your answer should be in terms of the parameters defined above. Explain your answer.
	 Since we know that the max number of path in the open list, the bound of the total cost of the solution is can be obtained by rearranging the above equation. ctotal = cmin(log(n+1)/log(4)-1)--> upper bound O(4^(ctotal/cmin+1))).




(3) Assume that you have a heuristic function h(n) that is monotone. For each evaluation function given below, will running A* with that evaluation function yield an optimal solution? If the answer is no, provide an upper bound for the ratio cost of returned solution cost of optimal solution .
    (3a) f(n) = g(n) +h(n) 
	 If a function is monotone, it is admissible, which guarantees optimality assuming no cycle checking. 
    (3b) f(n) = g(n) +3 ∗ h(n) 
	 Even though h(n) is admissible, it does not mean that 3*h(n) is. There it might not yield an optimal solution. The ratio would be 3.
    (3c) f(n) = 3 ∗ g(n) +h(n) 
	 Yes it yields an optimal solution since h(n) is admissible. 




(4) Consider two monotone heuristics h1 and h2. h1 dominates h2, but h1 takes much longer to compute than h2.
    (4a) Describe a situation in which you would recommend that Pacman use h1. 
	 I would recommend heuristic h1 when the search is less complex (ie when there are more open space in the maze). This is because you want to prevent the algorithm from expanding too many unnecessary nodes. Also, since the search space has more open space, the distance calculation would be less complicated; therefore, an efficient heuristic like h1 (even though it takes longer to compute) would be ideal for this situation. 
    (4b) Describe a situation in which you would recommend that Pacman use h2. 
	 On the other hand, if the search space is more complex and have many goals (referencing part 8 of the assignment) with a lot of walls and obstacles, heuristic h2 would be preferable. This is because the walls restrict the path. Pacman can only branch in certain directions; therefore, it would be better to have paceman expand more nodes in this tricky situation. Furthermore, the obstacles and walls would make the calculations more complex, so a heuristic with less computing time would be preferred. 